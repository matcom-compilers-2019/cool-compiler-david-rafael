//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cool.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419




#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CS3021 // Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute
#pragma warning disable CS0105 //The using directive for 'System.Collections.Generic' appeared previously in this namespace [D:\Desktop\projects\coolc\coolc\src\coolc\coolc.csproj


using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class CoolParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, COLON=3, ATSYM=4, COMMA=5, PLUS=6, MINUS=7, STAR=8, 
		SLASH=9, TILDE=10, LT=11, BT=12, EQUALS=13, LBRACE=14, RBRACE=15, DOT=16, 
		LE=17, BE=18, ASSIGN=19, SEMICOLON=20, DARROW=21, CLASS=22, ELSE=23, FI=24, 
		IF=25, IN=26, INHERITS=27, LET=28, LOOP=29, POOL=30, THEN=31, WHILE=32, 
		CASE=33, ESAC=34, OF=35, NEW=36, ISVOID=37, NOT=38, BOOL=39, ID=40, TYPE=41, 
		INT=42, STRING=43, WS=44, LINE_COMMENT=45, BLOCKCOMMENT=46;
	public const int
		RULE_program = 0, RULE_classdef = 1, RULE_feature = 2, RULE_formal = 3, 
		RULE_expresion = 4, RULE_newvar = 5;
	public static readonly string[] ruleNames = {
		"program", "classdef", "feature", "formal", "expresion", "newvar"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':'", "'@'", "','", "'+'", "'-'", "'*'", "'/'", "'~'", 
		"'<'", "'>'", "'='", "'{'", "'}'", "'.'", "'<='", "'>='", "'<-'", "';'", 
		"'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "COLON", "ATSYM", "COMMA", "PLUS", "MINUS", 
		"STAR", "SLASH", "TILDE", "LT", "BT", "EQUALS", "LBRACE", "RBRACE", "DOT", 
		"LE", "BE", "ASSIGN", "SEMICOLON", "DARROW", "CLASS", "ELSE", "FI", "IF", 
		"IN", "INHERITS", "LET", "LOOP", "POOL", "THEN", "WHILE", "CASE", "ESAC", 
		"OF", "NEW", "ISVOID", "NOT", "BOOL", "ID", "TYPE", "INT", "STRING", "WS", 
		"LINE_COMMENT", "BLOCKCOMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cool.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CoolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}




		public CoolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CoolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CoolParser.Eof, 0); }
		public ClassdefContext[] classdef() {
			return GetRuleContexts<ClassdefContext>();
		}
		public ClassdefContext classdef(int i) {
			return GetRuleContext<ClassdefContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CoolParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CoolParser.SEMICOLON, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 12; classdef();
				State = 13; Match(SEMICOLON);
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CLASS );
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdefContext : ParserRuleContext {
		public IToken t;
		public IToken it;
		public ITerminalNode CLASS() { return GetToken(CoolParser.CLASS, 0); }
		public ITerminalNode LBRACE() { return GetToken(CoolParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(CoolParser.RBRACE, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public ITerminalNode INHERITS() { return GetToken(CoolParser.INHERITS, 0); }
		public FeatureContext[] feature() {
			return GetRuleContexts<FeatureContext>();
		}
		public FeatureContext feature(int i) {
			return GetRuleContext<FeatureContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CoolParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CoolParser.SEMICOLON, i);
		}
		public ClassdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterClassdef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitClassdef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassdefContext classdef() {
		ClassdefContext _localctx = new ClassdefContext(Context, State);
		EnterRule(_localctx, 2, RULE_classdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(CLASS);
			State = 22; _localctx.t = Match(TYPE);
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITS) {
				{
				State = 23; Match(INHERITS);
				State = 24; _localctx.it = Match(TYPE);
				}
			}

			State = 27; Match(LBRACE);
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 28; feature();
				State = 29; Match(SEMICOLON);
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 36; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureContext : ParserRuleContext {
		public FeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feature; } }
	 
		public FeatureContext() { }
		public virtual void CopyFrom(FeatureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttribFeatureContext : FeatureContext {
		public IToken id;
		public IToken t;
		public ExpresionContext e;
		public ITerminalNode COLON() { return GetToken(CoolParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(CoolParser.ASSIGN, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AttribFeatureContext(FeatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterAttribFeature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitAttribFeature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribFeature(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodFeatureContext : FeatureContext {
		public IToken id;
		public IToken t;
		public ExpresionContext e;
		public ITerminalNode LPAREN() { return GetToken(CoolParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CoolParser.RPAREN, 0); }
		public ITerminalNode COLON() { return GetToken(CoolParser.COLON, 0); }
		public ITerminalNode LBRACE() { return GetToken(CoolParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(CoolParser.RBRACE, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public FormalContext[] formal() {
			return GetRuleContexts<FormalContext>();
		}
		public FormalContext formal(int i) {
			return GetRuleContext<FormalContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CoolParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CoolParser.COMMA, i);
		}
		public MethodFeatureContext(FeatureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterMethodFeature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitMethodFeature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodFeature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureContext feature() {
		FeatureContext _localctx = new FeatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_feature);
		int _la;
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new MethodFeatureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 38; ((MethodFeatureContext)_localctx).id = Match(ID);
				State = 39; Match(LPAREN);
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ID) {
					{
					State = 40; formal();
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 41; Match(COMMA);
						State = 42; formal();
						}
						}
						State = 47;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 50; Match(RPAREN);
				State = 51; Match(COLON);
				State = 52; ((MethodFeatureContext)_localctx).t = Match(TYPE);
				State = 53; Match(LBRACE);
				State = 54; ((MethodFeatureContext)_localctx).e = expresion(0);
				State = 55; Match(RBRACE);
				}
				break;
			case 2:
				_localctx = new AttribFeatureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; ((AttribFeatureContext)_localctx).id = Match(ID);
				State = 58; Match(COLON);
				State = 59; ((AttribFeatureContext)_localctx).t = Match(TYPE);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 60; Match(ASSIGN);
					State = 61; ((AttribFeatureContext)_localctx).e = expresion(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalContext : ParserRuleContext {
		public IToken id;
		public IToken t;
		public ITerminalNode COLON() { return GetToken(CoolParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public FormalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterFormal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitFormal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalContext formal() {
		FormalContext _localctx = new FormalContext(Context, State);
		EnterRule(_localctx, 6, RULE_formal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; _localctx.id = Match(ID);
			State = 67; Match(COLON);
			State = 68; _localctx.t = Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
	 
		public ExpresionContext() { }
		public virtual void CopyFrom(ExpresionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LessExpContext : ExpresionContext {
		public ExpresionContext le;
		public ExpresionContext re;
		public ITerminalNode LT() { return GetToken(CoolParser.LT, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LessExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterLessExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitLessExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpContext : ExpresionContext {
		public IToken id;
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public IdentifierExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterIdentifierExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitIdentifierExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExpContext : ExpresionContext {
		public IToken id;
		public ExpresionContext e;
		public ITerminalNode ASSIGN() { return GetToken(CoolParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public AssignExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterAssignExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitAssignExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtsimExpContext : ExpresionContext {
		public IToken t;
		public IToken id;
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(CoolParser.DOT, 0); }
		public ITerminalNode LPAREN() { return GetToken(CoolParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CoolParser.RPAREN, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode ATSYM() { return GetToken(CoolParser.ATSYM, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CoolParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CoolParser.COMMA, i);
		}
		public AtsimExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterAtsimExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitAtsimExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtsimExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsvoidExpContext : ExpresionContext {
		public ExpresionContext e;
		public ITerminalNode ISVOID() { return GetToken(CoolParser.ISVOID, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public IsvoidExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterIsvoidExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitIsvoidExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsvoidExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpContext : ExpresionContext {
		public ITerminalNode BOOL() { return GetToken(CoolParser.BOOL, 0); }
		public BoolExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterBoolExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitBoolExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExp(this);
			else return visitor.VisitChildren(this);
		}
	}
    public partial class BiggerEqualExpContext : ExpresionContext
    {
        public ExpresionContext le;
        public ExpresionContext re;
        public ITerminalNode BE() { return GetToken(CoolParser.BE, 0); }
        public ExpresionContext[] expresion()
        {
            return GetRuleContexts<ExpresionContext>();
        }
        public ExpresionContext expresion(int i)
        {
            return GetRuleContext<ExpresionContext>(i);
        }
        public BiggerEqualExpContext(ExpresionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            ICoolListener typedListener = listener as ICoolListener;
            if (typedListener != null) typedListener.EnterBiggerEqualExp(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            ICoolListener typedListener = listener as ICoolListener;
            if (typedListener != null) typedListener.ExitBiggerEqualExp(this);
        }
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBiggerEqualExp(this);
            else return visitor.VisitChildren(this);
        }
    }
    public partial class LessEqualExpContext : ExpresionContext {
		public ExpresionContext le;
		public ExpresionContext re;
		public ITerminalNode LE() { return GetToken(CoolParser.LE, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public LessEqualExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterLessEqualExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitLessEqualExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessEqualExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	
	public partial class WhileExpContext : ExpresionContext {
		public ExpresionContext le;
		public ExpresionContext re;
		public ITerminalNode WHILE() { return GetToken(CoolParser.WHILE, 0); }
		public ITerminalNode LOOP() { return GetToken(CoolParser.LOOP, 0); }
		public ITerminalNode POOL() { return GetToken(CoolParser.POOL, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public WhileExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterWhileExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitWhileExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpContext : ExpresionContext {
		public ExpresionContext e;
		public ITerminalNode NOT() { return GetToken(CoolParser.NOT, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NotExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterNotExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitNotExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracedExpContext : ExpresionContext {
		public ITerminalNode LBRACE() { return GetToken(CoolParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(CoolParser.RBRACE, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CoolParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CoolParser.SEMICOLON, i);
		}
		public BracedExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterBracedExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitBracedExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracedExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetExpContext : ExpresionContext {
		public ExpresionContext body;
		public ITerminalNode LET() { return GetToken(CoolParser.LET, 0); }
		public NewvarContext[] newvar() {
			return GetRuleContexts<NewvarContext>();
		}
		public NewvarContext newvar(int i) {
			return GetRuleContext<NewvarContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CoolParser.IN, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CoolParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CoolParser.COMMA, i);
		}
		public LetExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterLetExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitLetExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentExpContext : ExpresionContext {
		public ExpresionContext e;
		public ITerminalNode LPAREN() { return GetToken(CoolParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CoolParser.RPAREN, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ParentExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterParentExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitParentExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsExpContext : ExpresionContext {
		public ExpresionContext le;
		public ExpresionContext re;
		public ITerminalNode EQUALS() { return GetToken(CoolParser.EQUALS, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public EqualsExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterEqualsExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitEqualsExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualsExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfExpContext : ExpresionContext {
		public ITerminalNode IF() { return GetToken(CoolParser.IF, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(CoolParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(CoolParser.ELSE, 0); }
		public ITerminalNode FI() { return GetToken(CoolParser.FI, 0); }
		public IfExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterIfExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitIfExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TildeExpContext : ExpresionContext {
		public ExpresionContext e;
		public ITerminalNode TILDE() { return GetToken(CoolParser.TILDE, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public TildeExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterTildeExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitTildeExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTildeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpContext : ExpresionContext {
		public IToken id;
		public ITerminalNode LPAREN() { return GetToken(CoolParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CoolParser.RPAREN, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CoolParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CoolParser.COMMA, i);
		}
		public MethodCallExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterMethodCallExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitMethodCallExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewTypeExpContext : ExpresionContext {
		public IToken t;
		public ITerminalNode NEW() { return GetToken(CoolParser.NEW, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public NewTypeExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterNewTypeExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitNewTypeExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewTypeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpContext : ExpresionContext {
		public IToken s;
		public ITerminalNode STRING() { return GetToken(CoolParser.STRING, 0); }
		public StringExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterStringExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitStringExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExpContext : ExpresionContext {
		public ExpresionContext le;
		public IToken op;
		public ExpresionContext re;
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(CoolParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(CoolParser.SLASH, 0); }
		public ITerminalNode PLUS() { return GetToken(CoolParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CoolParser.MINUS, 0); }
		public InfixExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterInfixExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitInfixExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntExpContext : ExpresionContext {
		public IToken i;
		public ITerminalNode INT() { return GetToken(CoolParser.INT, 0); }
		public IntExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterIntExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitIntExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BiggerExpContext : ExpresionContext {
		public ExpresionContext le;
		public ExpresionContext re;
		public ITerminalNode BT() { return GetToken(CoolParser.BT, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public BiggerExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterBiggerExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitBiggerExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBiggerExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpContext : ExpresionContext {
		public IToken t;
		public ITerminalNode CASE() { return GetToken(CoolParser.CASE, 0); }
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ITerminalNode OF() { return GetToken(CoolParser.OF, 0); }
		public ITerminalNode ESAC() { return GetToken(CoolParser.ESAC, 0); }
		public ITerminalNode[] ID() { return GetTokens(CoolParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(CoolParser.ID, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(CoolParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(CoolParser.COLON, i);
		}
		public ITerminalNode[] DARROW() { return GetTokens(CoolParser.DARROW); }
		public ITerminalNode DARROW(int i) {
			return GetToken(CoolParser.DARROW, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CoolParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CoolParser.SEMICOLON, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(CoolParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CoolParser.TYPE, i);
		}
		public CaseExpContext(ExpresionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterCaseExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitCaseExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(Context, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expresion, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new MethodCallExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 71; ((MethodCallExpContext)_localctx).id = Match(ID);
				State = 72; Match(LPAREN);
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << TILDE) | (1L << LBRACE) | (1L << IF) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << ISVOID) | (1L << NOT) | (1L << BOOL) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
					{
					State = 73; expresion(0);
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 74; Match(COMMA);
						State = 75; expresion(0);
						}
						}
						State = 80;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 83; Match(RPAREN);

						
						
				}
				break;
			case 2:
				{
				_localctx = new IfExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; Match(IF);
				State = 86; expresion(0);
				State = 87; Match(THEN);
				State = 88; expresion(0);
				State = 89; Match(ELSE);
				State = 90; expresion(0);
				State = 91; Match(FI);
				}
				break;
			case 3:
				{
				_localctx = new WhileExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(WHILE);
				State = 94; ((WhileExpContext)_localctx).le = expresion(0);
				State = 95; Match(LOOP);
				State = 96; ((WhileExpContext)_localctx).re = expresion(0);
				State = 97; Match(POOL);
				}
				break;
			case 4:
				{
				_localctx = new BracedExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(LBRACE);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 100; expresion(0);
					State = 101; Match(SEMICOLON);
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << TILDE) | (1L << LBRACE) | (1L << IF) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << ISVOID) | (1L << NOT) | (1L << BOOL) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0) );
				State = 107; Match(RBRACE);
				}
				break;
			case 5:
				{
				_localctx = new LetExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; Match(LET);
				State = 110; newvar();
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 111; Match(COMMA);
					State = 112; newvar();
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 118; Match(IN);
				State = 119; ((LetExpContext)_localctx).body = expresion(19);
				}
				break;
			case 6:
				{
				_localctx = new CaseExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; Match(CASE);
				State = 122; expresion(0);
				State = 123; Match(OF);
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 124; Match(ID);
					State = 125; Match(COLON);
					State = 126; ((CaseExpContext)_localctx).t = Match(TYPE);
					State = 127; Match(DARROW);
					State = 128; expresion(0);
					State = 129; Match(SEMICOLON);
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 135; Match(ESAC);
				}
				break;
			case 7:
				{
				_localctx = new NewTypeExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; Match(NEW);
				State = 138; ((NewTypeExpContext)_localctx).t = Match(TYPE);
				}
				break;
			case 8:
				{
				_localctx = new IsvoidExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139; Match(ISVOID);
				State = 140; ((IsvoidExpContext)_localctx).e = expresion(16);
				}
				break;
			case 9:
				{
				_localctx = new TildeExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141; Match(TILDE);
				State = 142; ((TildeExpContext)_localctx).e = expresion(13);
				}
				break;
			case 10:
				{
				_localctx = new NotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143; Match(NOT);
				State = 144; ((NotExpContext)_localctx).e = expresion(7);
				}
				break;
			case 11:
				{
				_localctx = new ParentExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145; Match(LPAREN);
				State = 146; ((ParentExpContext)_localctx).e = expresion(0);
				State = 147; Match(RPAREN);
				}
				break;
			case 12:
				{
				_localctx = new StringExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; ((StringExpContext)_localctx).s = Match(STRING);
				}
				break;
			case 13:
				{
				_localctx = new IntExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150; ((IntExpContext)_localctx).i = Match(INT);
				}
				break;
			case 14:
				{
				_localctx = new BoolExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151; Match(BOOL);
				}
				break;
			case 15:
				{
				_localctx = new IdentifierExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152; ((IdentifierExpContext)_localctx).id = Match(ID);
				}
				break;
			case 16:
				{
				_localctx = new AssignExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153; ((AssignExpContext)_localctx).id = Match(ID);
				State = 154; Match(ASSIGN);
				State = 155; ((AssignExpContext)_localctx).e = expresion(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 198;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new InfixExpContext(new ExpresionContext(_parentctx, _parentState));
						((InfixExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 158;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 159;
						((InfixExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==STAR || _la==SLASH) ) {
							((InfixExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 160; ((InfixExpContext)_localctx).re = expresion(16);
						}
						break;
					case 2:
						{
						_localctx = new InfixExpContext(new ExpresionContext(_parentctx, _parentState));
						((InfixExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 161;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 162;
						((InfixExpContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((InfixExpContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 163; ((InfixExpContext)_localctx).re = expresion(15);
						}
						break;
					case 3:
						{
						_localctx = new LessExpContext(new ExpresionContext(_parentctx, _parentState));
						((LessExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 164;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 165; Match(LT);
						State = 166; ((LessExpContext)_localctx).re = expresion(13);
						}
						break;
					case 4:
						{
						_localctx = new BiggerExpContext(new ExpresionContext(_parentctx, _parentState));
						((BiggerExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 167;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 168; Match(BT);
						State = 169; ((BiggerExpContext)_localctx).re = expresion(12);
						}
						break;
					case 5:
						{
						_localctx = new LessEqualExpContext(new ExpresionContext(_parentctx, _parentState));
						((LessEqualExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 170;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 171; Match(LE);
						State = 172; ((LessEqualExpContext)_localctx).re = expresion(11);
						}
						break;
					case 6:
						{
						_localctx = new BiggerEqualExpContext(new ExpresionContext(_parentctx, _parentState));
						((BiggerEqualExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 173;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 174; Match(BE);
						State = 175; ((BiggerEqualExpContext)_localctx).re = expresion(10);
						}
						break;
					case 7:
						{
						_localctx = new EqualsExpContext(new ExpresionContext(_parentctx, _parentState));
						((EqualsExpContext)_localctx).le = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 176;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 177; Match(EQUALS);
						State = 178; ((EqualsExpContext)_localctx).re = expresion(9);
						}
						break;
					case 8:
						{
						_localctx = new AtsimExpContext(new ExpresionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 179;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 182;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ATSYM) {
							{
							State = 180; Match(ATSYM);
							State = 181; ((AtsimExpContext)_localctx).t = Match(TYPE);
							}
						}

						State = 184; Match(DOT);
						State = 185; ((AtsimExpContext)_localctx).id = Match(ID);
						State = 186; Match(LPAREN);
						State = 195;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << TILDE) | (1L << LBRACE) | (1L << IF) | (1L << LET) | (1L << WHILE) | (1L << CASE) | (1L << NEW) | (1L << ISVOID) | (1L << NOT) | (1L << BOOL) | (1L << ID) | (1L << INT) | (1L << STRING))) != 0)) {
							{
							State = 187; expresion(0);
							State = 192;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 188; Match(COMMA);
								State = 189; expresion(0);
								}
								}
								State = 194;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 197; Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewvarContext : ParserRuleContext {
		public IToken id;
		public IToken t;
		public ExpresionContext e;
		public ITerminalNode COLON() { return GetToken(CoolParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(CoolParser.ID, 0); }
		public ITerminalNode TYPE() { return GetToken(CoolParser.TYPE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(CoolParser.ASSIGN, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NewvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.EnterNewvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICoolListener typedListener = listener as ICoolListener;
			if (typedListener != null) typedListener.ExitNewvar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICoolVisitor<TResult> typedVisitor = visitor as ICoolVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewvar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewvarContext newvar() {
		NewvarContext _localctx = new NewvarContext(Context, State);
		EnterRule(_localctx, 10, RULE_newvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; _localctx.id = Match(ID);
			State = 204; Match(COLON);
			State = 205; _localctx.t = Match(TYPE);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 206; Match(ASSIGN);
				State = 207; _localctx.e = expresion(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 24);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30', '\xD5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x6', '\x2', '\x12', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\"', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '%', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '.', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x31', '\v', 
		'\x4', '\x5', '\x4', '\x33', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x41', '\n', '\x4', '\x5', '\x4', '\x43', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'R', '\v', '\x6', 
		'\x5', '\x6', 'T', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 'j', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', 'k', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 't', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'w', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', '\x86', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x87', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x9F', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB9', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '\xC1', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'\xC4', '\v', '\x6', '\x5', '\x6', '\xC6', '\n', '\x6', '\x3', '\x6', 
		'\a', '\x6', '\xC9', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xCC', '\v', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '\xD3', '\n', '\a', '\x3', '\a', '\x2', '\x3', '\n', '\b', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x4', '\x3', '\x2', '\n', 
		'\v', '\x3', '\x2', '\b', '\t', '\x2', '\xF5', '\x2', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', '\x2', '\x6', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x9E', '\x3', '\x2', '\x2', '\x2', '\f', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x10', 
		'\a', '\x16', '\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\xE', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x16', '\a', '\x2', '\x2', '\x3', '\x16', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x18', '\a', '\x18', '\x2', '\x2', '\x18', '\x1B', 
		'\a', '+', '\x2', '\x2', '\x19', '\x1A', '\a', '\x1D', '\x2', '\x2', '\x1A', 
		'\x1C', '\a', '+', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '#', '\a', '\x10', '\x2', '\x2', '\x1E', 
		'\x1F', '\x5', '\x6', '\x4', '\x2', '\x1F', ' ', '\a', '\x16', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\a', '\x11', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\a', '*', '\x2', '\x2', ')', '\x32', '\a', '\x3', '\x2', '\x2', 
		'*', '/', '\x5', '\b', '\x5', '\x2', '+', ',', '\a', '\a', '\x2', '\x2', 
		',', '.', '\x5', '\b', '\x5', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x4', '\x2', '\x2', '\x35', '\x36', '\a', '\x5', '\x2', '\x2', '\x36', 
		'\x37', '\a', '+', '\x2', '\x2', '\x37', '\x38', '\a', '\x10', '\x2', 
		'\x2', '\x38', '\x39', '\x5', '\n', '\x6', '\x2', '\x39', ':', '\a', '\x11', 
		'\x2', '\x2', ':', '\x43', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 
		'*', '\x2', '\x2', '<', '=', '\a', '\x5', '\x2', '\x2', '=', '@', '\a', 
		'+', '\x2', '\x2', '>', '?', '\a', '\x15', '\x2', '\x2', '?', '\x41', 
		'\x5', '\n', '\x6', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '(', '\x3', '\x2', '\x2', '\x2', '\x42', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\a', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\a', '*', '\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', '\x2', '\x46', 
		'G', '\a', '+', '\x2', '\x2', 'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\b', '\x6', '\x1', '\x2', 'I', 'J', '\a', '*', '\x2', '\x2', 'J', 
		'S', '\a', '\x3', '\x2', '\x2', 'K', 'P', '\x5', '\n', '\x6', '\x2', 'L', 
		'M', '\a', '\a', '\x2', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 
		'L', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 
		'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 
		'S', 'K', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\x4', '\x2', '\x2', 
		'V', '\x9F', '\b', '\x6', '\x1', '\x2', 'W', 'X', '\a', '\x1B', '\x2', 
		'\x2', 'X', 'Y', '\x5', '\n', '\x6', '\x2', 'Y', 'Z', '\a', '!', '\x2', 
		'\x2', 'Z', '[', '\x5', '\n', '\x6', '\x2', '[', '\\', '\a', '\x19', '\x2', 
		'\x2', '\\', ']', '\x5', '\n', '\x6', '\x2', ']', '^', '\a', '\x1A', '\x2', 
		'\x2', '^', '\x9F', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\"', 
		'\x2', '\x2', '`', '\x61', '\x5', '\n', '\x6', '\x2', '\x61', '\x62', 
		'\a', '\x1F', '\x2', '\x2', '\x62', '\x63', '\x5', '\n', '\x6', '\x2', 
		'\x63', '\x64', '\a', ' ', '\x2', '\x2', '\x64', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\x65', 'i', '\a', '\x10', '\x2', '\x2', '\x66', 'g', '\x5', 
		'\n', '\x6', '\x2', 'g', 'h', '\a', '\x16', '\x2', '\x2', 'h', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\x11', '\x2', '\x2', 'n', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\a', '\x1E', '\x2', '\x2', 'p', 'u', '\x5', '\f', '\a', 
		'\x2', 'q', 'r', '\a', '\a', '\x2', '\x2', 'r', 't', '\x5', '\f', '\a', 
		'\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\x1C', '\x2', '\x2', 'y', 'z', '\x5', '\n', '\x6', 
		'\x15', 'z', '\x9F', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '#', 
		'\x2', '\x2', '|', '}', '\x5', '\n', '\x6', '\x2', '}', '\x85', '\a', 
		'%', '\x2', '\x2', '~', '\x7F', '\a', '*', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x5', '\x2', '\x2', '\x80', '\x81', '\a', '+', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\x17', '\x2', '\x2', '\x82', '\x83', '\x5', '\n', '\x6', 
		'\x2', '\x83', '\x84', '\a', '\x16', '\x2', '\x2', '\x84', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '~', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '$', '\x2', '\x2', '\x8A', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '&', '\x2', 
		'\x2', '\x8C', '\x9F', '\a', '+', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\'', '\x2', '\x2', '\x8E', '\x9F', '\x5', '\n', '\x6', '\x12', '\x8F', 
		'\x90', '\a', '\f', '\x2', '\x2', '\x90', '\x9F', '\x5', '\n', '\x6', 
		'\xF', '\x91', '\x92', '\a', '(', '\x2', '\x2', '\x92', '\x9F', '\x5', 
		'\n', '\x6', '\t', '\x93', '\x94', '\a', '\x3', '\x2', '\x2', '\x94', 
		'\x95', '\x5', '\n', '\x6', '\x2', '\x95', '\x96', '\a', '\x4', '\x2', 
		'\x2', '\x96', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9F', '\a', 
		'-', '\x2', '\x2', '\x98', '\x9F', '\a', ',', '\x2', '\x2', '\x99', '\x9F', 
		'\a', ')', '\x2', '\x2', '\x9A', '\x9F', '\a', '*', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '*', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x15', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\n', '\x6', '\x3', '\x9E', 'H', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', 'W', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', 'o', '\x3', '\x2', '\x2', '\x2', '\x9E', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\f', '\x11', '\x2', '\x2', '\xA1', '\xA2', '\t', '\x2', '\x2', '\x2', 
		'\xA2', '\xC9', '\x5', '\n', '\x6', '\x12', '\xA3', '\xA4', '\f', '\x10', 
		'\x2', '\x2', '\xA4', '\xA5', '\t', '\x3', '\x2', '\x2', '\xA5', '\xC9', 
		'\x5', '\n', '\x6', '\x11', '\xA6', '\xA7', '\f', '\xE', '\x2', '\x2', 
		'\xA7', '\xA8', '\a', '\r', '\x2', '\x2', '\xA8', '\xC9', '\x5', '\n', 
		'\x6', '\xF', '\xA9', '\xAA', '\f', '\r', '\x2', '\x2', '\xAA', '\xAB', 
		'\a', '\xE', '\x2', '\x2', '\xAB', '\xC9', '\x5', '\n', '\x6', '\xE', 
		'\xAC', '\xAD', '\f', '\f', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x13', 
		'\x2', '\x2', '\xAE', '\xC9', '\x5', '\n', '\x6', '\r', '\xAF', '\xB0', 
		'\f', '\v', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x14', '\x2', '\x2', 
		'\xB1', '\xC9', '\x5', '\n', '\x6', '\f', '\xB2', '\xB3', '\f', '\n', 
		'\x2', '\x2', '\xB3', '\xB4', '\a', '\xF', '\x2', '\x2', '\xB4', '\xC9', 
		'\x5', '\n', '\x6', '\v', '\xB5', '\xB8', '\f', '\x1A', '\x2', '\x2', 
		'\xB6', '\xB7', '\a', '\x6', '\x2', '\x2', '\xB7', '\xB9', '\a', '+', 
		'\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\a', '\x12', '\x2', '\x2', '\xBB', '\xBC', '\a', '*', 
		'\x2', '\x2', '\xBC', '\xC5', '\a', '\x3', '\x2', '\x2', '\xBD', '\xC2', 
		'\x5', '\n', '\x6', '\x2', '\xBE', '\xBF', '\a', '\a', '\x2', '\x2', '\xBF', 
		'\xC1', '\x5', '\n', '\x6', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC9', '\a', '\x4', '\x2', '\x2', '\xC8', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\v', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', '*', '\x2', '\x2', '\xCE', 
		'\xCF', '\a', '\x5', '\x2', '\x2', '\xCF', '\xD2', '\a', '+', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '\x15', '\x2', '\x2', '\xD1', '\xD3', '\x5', '\n', 
		'\x6', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x1B', '#', '/', '\x32', '@', '\x42', 'P', 'S', 'k', 
		'u', '\x87', '\x9E', '\xB8', '\xC2', '\xC5', '\xC8', '\xCA', '\xD2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
